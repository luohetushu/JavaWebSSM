Git: 分布式版本控制系统
Github：免费的远程仓库，可以将其他的开源项目 Fork，在自己的饿账户下克隆出同名仓库，然后可以在本地拉取、修改、提交、推送
       账户邮箱：1398009647@qq.com
       账户密码：独立密码
Gitee：免费的远程仓库
       账户邮箱：1398009647@qq.com
       账户密码：独立密码

mac 文件夹内显示隐藏文件：command + shift + .   // 点击显示或隐藏

vi 编辑指令
vi <file> // 指定文件进入vi编辑  vi ~/.ssh/id_rsa.pub
进入编辑状态：大写I：光标停在行首
            大写A：光标停在行尾
退出编辑状态：Esc
退出vi编辑："shift + :" ，然后 wq（保存退出）或者 q!(不保存退出)

git 更新指令：
git clone https://github.com/git/git   //get the latest development version via Git itself

工作区：我们创建的仓库目录，如：/Users/murongyunge/Desktop/Repository/Git/FirstRepository   //仓库全目录
暂存区：工作区中有个隐藏文件 .git（Git 版本库），Git 版本库中的 index（或者 stage）称为暂存区
       当我们使用 git add <file> 命令添加或修改某个文件后，Git 会将文件添加到暂存区
       使用 git commit 命令，则将暂存区的所有内容添加到当前分支
           //每次修改，如果不事先 git add到暂存区，那就不会加入到 commit 中

Mac 系统 git 使用
1、安装好之后设置姓名与密码：
   $ git config --global user.name "Your Name"           // wuyue
   $ git config --global user.email "email@example.com"  // 1398009647@qq.com
   查看用户名和邮箱地址: $ git config user.name
                      $ git config user.email
   修改全局用户名和邮箱地址：$ git config --global user.name  "username"
                         $ git config --global user.email "email"
   修改局部用户名和邮箱地址: $ cd ~/you project
                         $ git config user.name  "username"
                         $ git config user.email "email"
   设置 Git ui 颜色：$ git config --global color.ui true
2、创建版本库，创建一个空目录
       murongyungedeMacBook-Pro:FirstRepository murongyunge$ pwd
       /Users/murongyunge/Desktop/Repository/Git/FirstRepository   //仓库全目录
   再通过 git init 命令把该目录变成 Git 可以管理的仓库：  // todo 此时该目录下会生成 .git（Git 版本库）隐藏文件，
                                                        同时创建第一个分支 master，以及指向该分支的指针 HEAD
       murongyungedeMacBook-Pro:FirstRepository murongyunge$ git init
       Initialized empty Git repository in /Users/murongyunge/Desktop/Repository/Git/FirstRepository/.git/
3、将要添加的文件放在仓库目录下，使用 git add 命令把文件添加到仓库：git add <file>  // 可以添加多个文件 todo 文件修改之后，提交之前也需重新 git add 一下
       murongyungedeMacBook-Pro:FirstRepository murongyunge$ git add readme.txt
       git add <file>   // 当前分支，添加指定文件到暂存区
       git add .     // 当前分支，添加修改、新建的所有文件到暂存区
       git add -u    // 当前分支，添加修改、删除的所有文件到暂存区 todo -u 为 update，需要在本地库中提交过的文件才行
       git add -A|--all  //当前分支，添加所有修改、删除、新建的文件到暂存区
   使用 git commit 命令把文件提交到仓库：git commit -m "备注此次改动的说明"  //commit 可以提交多个文件
       murongyungedeMacBook-Pro:FirstRepository murongyunge$ git commit -m "commit a readme file to repository at first"


版本回退：
    git reset --hard HEAD^  // 回退到上一个版本  HEAD^^(上上个版本)  HEAD~100(往上100个版本)
    如：$ git reset --hard HEAD^
       HEAD is now at f04ec62 modify readme file:add distributed
恢复到之后某个版本：
    git reset --hard <commitId>  // 指定之后某个版本的 commitId（版本号，只需前7位），
    如：$ git reset --hard 52a2efe
       HEAD is now at 52a2efe modify readme file:append GPL
撤销修改：
    1、只是工作区的修改，还未添加到暂存区，使用如下命令撤销修改 // to discard changes in working directory
      git checkout -- <file>   // 撤销当前分支工作区内指定文件的修改
                               // todo git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”
    2、如果修改的文件已添加到暂存区，可使用如下命令回退到工作区修改状态
      git reset HEAD <file>    // to unstage
      再使用情况一撤销修改
    3、如果修改的文件已提交版本库（当前分支），可使用版本回退方式
删除文件：git rm <file>  // 删除指定文件，
        注：只是工作区内的文件删除，如果还想删除版本库中的，还需提交：git commit -m "...."
                                如果想恢复删除的文件，可以使用：git checkout -- <file>  //todo 前提是之前有提交该文件到版本库，否则无法恢复
添加远程仓库：工作区已有内容提交到本地仓库，
    1、关联远程仓库：Github   // Git支持多种协议，https（速度慢、提交需要口令）、ssh协议（速度最快）
           git remote add <远程仓库名> git@github.com:luohetushu/FirstRepository.git
       或者 git remote add <远程仓库名> https://github.com/luohetushu/FirstRepository.git
       注：todo 如果只关联一个远程仓库，远程仓库名一般默认为 origin；如果关联多个，则需要分别命名
    2、首次推送：git push -u <远程仓库名> master  // 使用 -u 参数，Git会把本地的 master 分支内容推送到远程新的 master 分支，
                                             同时把本地的 master 分支和远程的 master 分支关联起来
       之后修改提交本地仓库之后，再推送：git push <远程仓库名> master   // todo origin 远程库名；master 远程库分支，可以自由选择
从远程库克隆： // 使用 ssh 协议，todo 要求 github 协议与本地 ~/.ssh/id_rsa.pub 中协议一致
    git clone git@github.com:luohetushu/CloneRepository.git
当前分支拉取远程指定分支：
    1、首先与远程指定分支关联：git branch --set-upstream-to=origin/<branch> <local-branch>
    2、使用 $ git pull 命令拉取
本地创建的仓库与远程有内容的仓库关联： // 此时产生的两个分支是两个不同的版本，具有不同的提交历史
    1、关联远程仓库：git remote add <远程仓库名> git@github.com:luohetushu/FirstRepository.git
                   或者 git remote add <远程仓库名> https://github.com/luohetushu/FirstRepository.git
    2、$ git fetch
       $ git pull <远程仓库名> master    // 确定远程 master 分支
    3、与远程指定分支关联：git branch --set-upstream-to=origin/<branch> <local-branch>
    4、拉取：$ git pull github master --allow-unrelated-histories // todo 两个分支是两个不同的版本，具有不同的提交历史

命令行使用：
git status 命令 可以查看当前分支工作区仓库文件的状态
git diff <file> 命令 可以查看指定文件修改的具体情况：  todo 需要有过修改但还没提交的文件
    如：murongyungedeMacBook-Pro:FirstRepository murongyunge$ git diff readme.txt
       diff --git a/readme.txt b/readme.txt
       index b290231..a8f8321 100644
       --- a/readme.txt
       +++ b/readme.txt
       @@ -1,3 +1,3 @@
       -Git is a version control system.
       +Git is a distributed version control system.
        Git is free software.
        This is first repository built by mine.
       \ No newline at end of file
git log [--pretty=oneline] 命令 查看历史修改记录
git reflog 命令 查看当前仓库提交、回退、恢复等指令
    如：$ git reflog        // todo HEAD 指向当前版本
       52a2efe (HEAD -> master) HEAD@{0}: reset: moving to 52a2efe  // 52a2efe 为 commitId ，也称 版本号
       f04ec62 HEAD@{1}: reset: moving to HEAD^
       52a2efe (HEAD -> master) HEAD@{2}: reset: moving to HEAD
       52a2efe (HEAD -> master) HEAD@{3}: commit: modify readme file:append GPL
       f04ec62 HEAD@{4}: commit: modify readme file:add distributed
       1fe9136 HEAD@{5}: commit (initial): commit a readme file to repository at first
cat <file> 命令 可以查看指定文件的内容
rm <file> 命令 删除指定文件

git remote 命令 查看远程库的信息
    如：$ git remote
       origin  //远程仓库的默认名称 origin
git remote -v 命令 查看远程仓库抓取和推送的地址：
    如：$ git remote -v
         origin	  https://github.com/luohetushu/FirstRepository.git (fetch)
         origin	  https://github.com/luohetushu/FirstRepository.git (push)  //如果没有推送权限，就看不到push的地址
git remote rm <远程仓库名>  命令 删除指定的关联远程仓库

git rebase 命令 可以把本地未 push 的分叉提交历史整理成直线
    rebase 的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比

